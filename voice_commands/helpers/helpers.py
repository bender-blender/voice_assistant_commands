from num2words import num2words
from word2number import w2n


def num2word(number) -> str:  # Преобразовать число в строку
    word = num2words(number, lang="ru")
    return word


def word2num(word: str) -> int:
    try:
        number = w2n.word_to_num(word)
    except ValueError:
        raise ValueError(f"Не удалось преобразовать слово '{word}' в число.")
    return number


numerals_dict = {
    "1": "первое",
    "2": "второе",
    "3": "третье",
    "4": "четвёртое",
    "5": "пятое",
    "6": "шестое",
    "7": "седьмое",
    "8": "восьмое",
    "9": "девятое",
    "10": "десятое",
    "11": "одиннадцатое",
    "12": "двенадцатое",
    "13": "тринадцатое",
    "14": "четырнадцатое",
    "15": "пятнадцатое",
    "16": "шестнадцатое",
    "17": "семнадцатое",
    "18": "восемнадцатое",
    "19": "девятнадцатое",
    "20": "двадцатое",
    "21": "двадцать первое",
    "22": "двадцать второе",
    "23": "двадцать третье",
    "24": "двадцать четвёртое",
    "25": "двадцать пятое",
    "26": "двадцать шестое",
    "27": "двадцать седьмое",
    "28": "двадцать восьмое",
    "29": "двадцать девятое",
    "30": "тридцатое",
    "31": "тридцать первое"
}


import datetime

# Сопоставление русских дней недели с weekday()
days_map = {
    "понедельник": 0,
    "вторник": 1,
    "среда": 2,
    "четверг": 3,
    "пятница": 4,
    "суббота": 5,
    "воскресенье": 6
}

def day_to_date(day: str) -> datetime.datetime | None:
    day = day.strip().lower()
    if day not in days_map:
        return None

    today = datetime.date.today()
    today_weekday = today.weekday()
    target_weekday = days_map[day]

    # Если сегодня — нужный день, возвращаем сегодня
    if today_weekday == target_weekday:
        return datetime.datetime.combine(today, datetime.time.min)

    # Иначе — ближайшая дата в будущем
    days_ahead = (target_weekday - today_weekday + 7) % 7
    next_date = today + datetime.timedelta(days=days_ahead)
    return datetime.datetime.combine(next_date, datetime.time.min)

# -------------------
# Текстовые даты в числовые
import dateparser

dictionary_num = {
    'ноль': 0,
    'один': 1, 'первого': 1, 'первое': 1, 'первый': 1,
    'два': 2, "две":2, 'второго': 2, 'второе': 2, 'второй': 2,
    'три': 3, 'третий': 3, 'третье': 3, 'третьего': 3,
    'четыре': 4, 'четвёртого': 4, 'четвёртое': 4, 'четвёртый': 4,
    'пять': 5, 'пятого': 5, 'пятое': 5, 'пятый': 5,
    'шесть': 6, 'шестого': 6, 'шестое': 6, 'шестой': 6,
    'семь': 7, 'седьмого': 7, 'седьмое': 7, 'седьмой': 7,
    'восемь': 8, 'восьмого': 8, 'восьмое': 8, 'восьмой': 8,
    'девять': 9, 'девятого': 9, 'девятое': 9, 'девятый': 9,
    'десять': 10, 'десятого': 10, 'десятое': 10, 'десятый': 10,
    'одиннадцать': 11, 'одиннадцатого': 11, 'одиннадцатое': 11, 'одиннадцатый': 11,
    'двенадцать': 12, 'двенадцатого': 12, 'двенадцатое': 12, 'двенадцатый': 12,
    'тринадцать': 13, 'тринадцатого': 13, 'тринадцатое': 13, 'тринадцатый': 13,
    'четырнадцать': 14, 'четырнадцатого': 14, 'четырнадцатое': 14, 'четырнадцатый': 14,
    'пятнадцать': 15, 'пятнадцатого': 15, 'пятнадцатое': 15, 'пятнадцатый': 15,
    'шестнадцать': 16, 'шестнадцатого': 16, 'шестнадцатое': 16, 'шестнадцатый': 16,
    'семнадцать': 17, 'семнадцатого': 17, 'семнадцатое': 17, 'семнадцатый': 17,
    'восемнадцать': 18, 'восемнадцатого': 18, 'восемнадцатое': 18, 'восемнадцатый': 18,
    'девятнадцать': 19, 'девятнадцатого': 19, 'девятнадцатое': 19, 'девятнадцатый': 19,
    'двадцать': 20, 'двадцатого': 20, 'двадцатое': 20, 'двадцатый': 20,
    'тридцать': 30, 'тридцатого': 30, 'тридцатое': 30, 'тридцатый': 30,
    'сорок': 40,
    'пятьдесят': 50,
    'шестьдесят': 60,
    'семьдесят': 70,
    'восемьдесят': 80,
    'девяносто': 90,
    'сто': 100,
    'двести': 200,
    'триста': 300,
    'четыреста': 400,
    'пятьсот': 500,
    'шестьсот': 600,
    'семьсот': 700,
    'восемьсот': 800,
    'девятьсот': 900,
    'тысяча': 1000, 'тысячи': 1000, 'тысяче': 1000, 'тысячу': 1000,
    'две тысячи': 2000, 'двухтысячного': 2000, 'двухтысячный': 2000
}


def parse_day_phrase(from_string: str, dictionary=dictionary_num):
    """
    Преобразует строку, содержащую словесное числительное и месяц,
    в строку с числом (например, 'три мая' → '3 мая') и парсит её.
    """
    words = from_string.strip().lower().split()
    new_words = []
    day = 0
    i = 0

    while i < len(words):
        word = words[i]
        if word in dictionary:
            if i + 1 < len(words) and words[i + 1] in dictionary:
                day = dictionary[word] + dictionary[words[i + 1]]
                i += 1
            else:
                day = dictionary[word]
            new_words.append(str(day))
        else:
            new_words.append(word)
        i += 1

    parsed_str = ' '.join(new_words)
    return dateparser.parse(parsed_str)
